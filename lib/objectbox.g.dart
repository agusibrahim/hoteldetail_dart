// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(3, 1859276628501029853),
      name: 'HotelItem',
      lastPropertyId: const IdUid(10, 971007782634851254),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6667698192371479562),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 159190294373967214),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 401138741798090858),
            name: 'rating',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1232605311322191840),
            name: 'desc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2144936782726059330),
            name: 'sortDesc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3416742665924727092),
            name: 'thumb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8384093605740829402),
            name: 'addrId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 6677786831141962872),
            relationTarget: 'Addr')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 8012960106238637345),
            name: 'poi',
            targetId: const IdUid(8, 5550286605932369806)),
        ModelRelation(
            id: const IdUid(3, 2977224567826835103),
            name: 'photos',
            targetId: const IdUid(7, 7671382216505008225)),
        ModelRelation(
            id: const IdUid(4, 3292537616858224328),
            name: 'facilities',
            targetId: const IdUid(5, 1198847496790854644))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 2115486077563963911),
      name: 'Addr',
      lastPropertyId: const IdUid(7, 2077282872703364535),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5544080766007093190),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5950273531271264740),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1753962088179840735),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4279828917559007119),
            name: 'area',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3939286881271549499),
            name: 'addr',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3511812552224525696),
            name: 'lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2077282872703364535),
            name: 'lng',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 1198847496790854644),
      name: 'HotelFacilities',
      lastPropertyId: const IdUid(4, 7910026873419325445),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 470131409520638606),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 383828122932684997),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2152092500544077280),
            name: 'ic',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 4595304211603645924),
            name: 'features',
            targetId: const IdUid(6, 3655609845702813919))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 3655609845702813919),
      name: 'HotelFeatures',
      lastPropertyId: const IdUid(4, 8208698784266063522),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8925689338490210193),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2688930375665099472),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6165976580832557342),
            name: 'ic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8208698784266063522),
            name: 'photo',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 7671382216505008225),
      name: 'HotelPhotos',
      lastPropertyId: const IdUid(4, 7609698148738899227),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5389282405779182109),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7528918973252921319),
            name: 'cat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7031489866624941401),
            name: 'desc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7609698148738899227),
            name: 'url',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 5550286605932369806),
      name: 'HotelPoi',
      lastPropertyId: const IdUid(8, 9068632798349663182),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7004748734045410067),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3878379966520596810),
            name: 'cat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4330648007657726239),
            name: 'ic',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 454563600913629058),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 406779750169174773),
            name: 'distanceTxt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4145996759548207856),
            name: 'lat',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7338346512388800260),
            name: 'lng',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 9068632798349663182),
            name: 'photo',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 5003477913178925923),
      name: 'HotelResultStatus',
      lastPropertyId: const IdUid(6, 899622552330372505),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1470756687578539100),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2392681665496882140),
            name: 'hotelName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4223731109395376504),
            name: 'query',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5470883075461302127),
            name: 'match',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 887868674357943182),
            name: 'provider',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 899622552330372505),
            name: 'hotelUrl',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 3752808697029403766),
      name: 'HotelCache',
      lastPropertyId: const IdUid(6, 79020633066067295),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2893884737306983626),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8007951635937899941),
            name: 'externalId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5634669324627413361),
            name: 'hashId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6659074276410576809),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4441571757456398804),
            name: 'hotelId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 1430721674788404726),
            relationTarget: 'HotelItem'),
        ModelProperty(
            id: const IdUid(6, 79020633066067295),
            name: 'statusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 3688654935594000214),
            relationTarget: 'HotelResultStatus')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(10, 3752808697029403766),
      lastIndexId: const IdUid(8, 3688654935594000214),
      lastRelationId: const IdUid(4, 3292537616858224328),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [4849918615804789240, 6223986000624450662],
      retiredIndexUids: const [
        5656580841897852978,
        8604783963956355879,
        3768560204161510699,
        940827908777642924
      ],
      retiredPropertyUids: const [
        48618471413708497,
        3221401926039043752,
        5527456897881110175,
        701663028820440322,
        7229299519982563449,
        6699336494652198226,
        3512629331388371847,
        7910026873419325445,
        6672334475439514665,
        7032341756579836860,
        971007782634851254
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    HotelItem: EntityDefinition<HotelItem>(
        model: _entities[0],
        toOneRelations: (HotelItem object) => [object.addr],
        toManyRelations: (HotelItem object) => {
              RelInfo<HotelItem>.toMany(2, object.id): object.poi,
              RelInfo<HotelItem>.toMany(3, object.id): object.photos,
              RelInfo<HotelItem>.toMany(4, object.id): object.facilities
            },
        getId: (HotelItem object) => object.id,
        setId: (HotelItem object, int id) {
          object.id = id;
        },
        objectToFB: (HotelItem object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descOffset = fbb.writeString(object.desc);
          final sortDescOffset = fbb.writeString(object.sortDesc);
          final thumbOffset = fbb.writeString(object.thumb);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.rating);
          fbb.addOffset(3, descOffset);
          fbb.addOffset(4, sortDescOffset);
          fbb.addOffset(5, thumbOffset);
          fbb.addInt64(7, object.addr.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HotelItem(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              rating:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              sortDesc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              thumb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              addr: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 18, 0)),
              poi: ToMany(),
              photos: ToMany(),
              facilities: ToMany())
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.addr.attach(store);
          InternalToManyAccess.setRelInfo(object.poi, store,
              RelInfo<HotelItem>.toMany(2, object.id), store.box<HotelItem>());
          InternalToManyAccess.setRelInfo(object.photos, store,
              RelInfo<HotelItem>.toMany(3, object.id), store.box<HotelItem>());
          InternalToManyAccess.setRelInfo(object.facilities, store,
              RelInfo<HotelItem>.toMany(4, object.id), store.box<HotelItem>());
          return object;
        }),
    Addr: EntityDefinition<Addr>(
        model: _entities[1],
        toOneRelations: (Addr object) => [],
        toManyRelations: (Addr object) => {},
        getId: (Addr object) => object.id,
        setId: (Addr object, int id) {
          object.id = id;
        },
        objectToFB: (Addr object, fb.Builder fbb) {
          final cityOffset = fbb.writeString(object.city);
          final countryOffset = fbb.writeString(object.country);
          final areaOffset = fbb.writeString(object.area);
          final addrOffset = fbb.writeString(object.addr);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, cityOffset);
          fbb.addOffset(2, countryOffset);
          fbb.addOffset(3, areaOffset);
          fbb.addOffset(4, addrOffset);
          fbb.addFloat64(5, object.lat);
          fbb.addFloat64(6, object.lng);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Addr(
              city: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              area: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              addr: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              lat:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              lng:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    HotelFacilities: EntityDefinition<HotelFacilities>(
        model: _entities[2],
        toOneRelations: (HotelFacilities object) => [],
        toManyRelations: (HotelFacilities object) =>
            {RelInfo<HotelFacilities>.toMany(1, object.id): object.features},
        getId: (HotelFacilities object) => object.id,
        setId: (HotelFacilities object, int id) {
          object.id = id;
        },
        objectToFB: (HotelFacilities object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final icOffset = fbb.writeString(object.ic);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, icOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HotelFacilities(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ic: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              features: ToMany())
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(
              object.features,
              store,
              RelInfo<HotelFacilities>.toMany(1, object.id),
              store.box<HotelFacilities>());
          return object;
        }),
    HotelFeatures: EntityDefinition<HotelFeatures>(
        model: _entities[3],
        toOneRelations: (HotelFeatures object) => [],
        toManyRelations: (HotelFeatures object) => {},
        getId: (HotelFeatures object) => object.id,
        setId: (HotelFeatures object, int id) {
          object.id = id;
        },
        objectToFB: (HotelFeatures object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final icOffset = fbb.writeString(object.ic);
          final photoOffset = fbb.writeString(object.photo);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, icOffset);
          fbb.addOffset(3, photoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HotelFeatures(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ic: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    HotelPhotos: EntityDefinition<HotelPhotos>(
        model: _entities[4],
        toOneRelations: (HotelPhotos object) => [],
        toManyRelations: (HotelPhotos object) => {},
        getId: (HotelPhotos object) => object.id,
        setId: (HotelPhotos object, int id) {
          object.id = id;
        },
        objectToFB: (HotelPhotos object, fb.Builder fbb) {
          final catOffset = fbb.writeString(object.cat);
          final descOffset = fbb.writeString(object.desc);
          final urlOffset = fbb.writeString(object.url);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, catOffset);
          fbb.addOffset(2, descOffset);
          fbb.addOffset(3, urlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HotelPhotos(
              cat: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              url: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    HotelPoi: EntityDefinition<HotelPoi>(
        model: _entities[5],
        toOneRelations: (HotelPoi object) => [],
        toManyRelations: (HotelPoi object) => {},
        getId: (HotelPoi object) => object.id,
        setId: (HotelPoi object, int id) {
          object.id = id;
        },
        objectToFB: (HotelPoi object, fb.Builder fbb) {
          final catOffset = fbb.writeString(object.cat);
          final icOffset = fbb.writeString(object.ic);
          final nameOffset = fbb.writeString(object.name);
          final distanceTxtOffset = fbb.writeString(object.distanceTxt);
          final photoOffset = fbb.writeString(object.photo);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, catOffset);
          fbb.addOffset(2, icOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, distanceTxtOffset);
          fbb.addFloat64(5, object.lat);
          fbb.addFloat64(6, object.lng);
          fbb.addOffset(7, photoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HotelPoi(
              cat: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ic: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              distanceTxt: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              lat:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              lng:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    HotelResultStatus: EntityDefinition<HotelResultStatus>(
        model: _entities[6],
        toOneRelations: (HotelResultStatus object) => [],
        toManyRelations: (HotelResultStatus object) => {},
        getId: (HotelResultStatus object) => object.id,
        setId: (HotelResultStatus object, int id) {
          object.id = id;
        },
        objectToFB: (HotelResultStatus object, fb.Builder fbb) {
          final hotelNameOffset = fbb.writeString(object.hotelName);
          final queryOffset = fbb.writeString(object.query);
          final providerOffset = fbb.writeString(object.provider);
          final hotelUrlOffset = fbb.writeString(object.hotelUrl);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, hotelNameOffset);
          fbb.addOffset(2, queryOffset);
          fbb.addFloat64(3, object.match);
          fbb.addOffset(4, providerOffset);
          fbb.addOffset(5, hotelUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HotelResultStatus(
              hotelName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              query: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              match:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              provider: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              hotelUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    HotelCache: EntityDefinition<HotelCache>(
        model: _entities[7],
        toOneRelations: (HotelCache object) => [object.hotel, object.status],
        toManyRelations: (HotelCache object) => {},
        getId: (HotelCache object) => object.id,
        setId: (HotelCache object, int id) {
          object.id = id;
        },
        objectToFB: (HotelCache object, fb.Builder fbb) {
          final externalIdOffset = fbb.writeString(object.externalId);
          final hashIdOffset = fbb.writeString(object.hashId);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, externalIdOffset);
          fbb.addOffset(2, hashIdOffset);
          fbb.addInt64(3, object.date?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.hotel.targetId);
          fbb.addInt64(5, object.status.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = HotelCache(
              ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              externalId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              date: dateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dateValue))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.hotel.attach(store);
          object.status.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [HotelItem] entity fields to define ObjectBox queries.
class HotelItem_ {
  /// see [HotelItem.id]
  static final id = QueryIntegerProperty<HotelItem>(_entities[0].properties[0]);

  /// see [HotelItem.name]
  static final name =
      QueryStringProperty<HotelItem>(_entities[0].properties[1]);

  /// see [HotelItem.rating]
  static final rating =
      QueryIntegerProperty<HotelItem>(_entities[0].properties[2]);

  /// see [HotelItem.desc]
  static final desc =
      QueryStringProperty<HotelItem>(_entities[0].properties[3]);

  /// see [HotelItem.sortDesc]
  static final sortDesc =
      QueryStringProperty<HotelItem>(_entities[0].properties[4]);

  /// see [HotelItem.thumb]
  static final thumb =
      QueryStringProperty<HotelItem>(_entities[0].properties[5]);

  /// see [HotelItem.addr]
  static final addr =
      QueryRelationToOne<HotelItem, Addr>(_entities[0].properties[6]);

  /// see [HotelItem.poi]
  static final poi =
      QueryRelationToMany<HotelItem, HotelPoi>(_entities[0].relations[0]);

  /// see [HotelItem.photos]
  static final photos =
      QueryRelationToMany<HotelItem, HotelPhotos>(_entities[0].relations[1]);

  /// see [HotelItem.facilities]
  static final facilities = QueryRelationToMany<HotelItem, HotelFacilities>(
      _entities[0].relations[2]);
}

/// [Addr] entity fields to define ObjectBox queries.
class Addr_ {
  /// see [Addr.id]
  static final id = QueryIntegerProperty<Addr>(_entities[1].properties[0]);

  /// see [Addr.city]
  static final city = QueryStringProperty<Addr>(_entities[1].properties[1]);

  /// see [Addr.country]
  static final country = QueryStringProperty<Addr>(_entities[1].properties[2]);

  /// see [Addr.area]
  static final area = QueryStringProperty<Addr>(_entities[1].properties[3]);

  /// see [Addr.addr]
  static final addr = QueryStringProperty<Addr>(_entities[1].properties[4]);

  /// see [Addr.lat]
  static final lat = QueryDoubleProperty<Addr>(_entities[1].properties[5]);

  /// see [Addr.lng]
  static final lng = QueryDoubleProperty<Addr>(_entities[1].properties[6]);
}

/// [HotelFacilities] entity fields to define ObjectBox queries.
class HotelFacilities_ {
  /// see [HotelFacilities.id]
  static final id =
      QueryIntegerProperty<HotelFacilities>(_entities[2].properties[0]);

  /// see [HotelFacilities.title]
  static final title =
      QueryStringProperty<HotelFacilities>(_entities[2].properties[1]);

  /// see [HotelFacilities.ic]
  static final ic =
      QueryStringProperty<HotelFacilities>(_entities[2].properties[2]);

  /// see [HotelFacilities.features]
  static final features = QueryRelationToMany<HotelFacilities, HotelFeatures>(
      _entities[2].relations[0]);
}

/// [HotelFeatures] entity fields to define ObjectBox queries.
class HotelFeatures_ {
  /// see [HotelFeatures.id]
  static final id =
      QueryIntegerProperty<HotelFeatures>(_entities[3].properties[0]);

  /// see [HotelFeatures.name]
  static final name =
      QueryStringProperty<HotelFeatures>(_entities[3].properties[1]);

  /// see [HotelFeatures.ic]
  static final ic =
      QueryStringProperty<HotelFeatures>(_entities[3].properties[2]);

  /// see [HotelFeatures.photo]
  static final photo =
      QueryStringProperty<HotelFeatures>(_entities[3].properties[3]);
}

/// [HotelPhotos] entity fields to define ObjectBox queries.
class HotelPhotos_ {
  /// see [HotelPhotos.id]
  static final id =
      QueryIntegerProperty<HotelPhotos>(_entities[4].properties[0]);

  /// see [HotelPhotos.cat]
  static final cat =
      QueryStringProperty<HotelPhotos>(_entities[4].properties[1]);

  /// see [HotelPhotos.desc]
  static final desc =
      QueryStringProperty<HotelPhotos>(_entities[4].properties[2]);

  /// see [HotelPhotos.url]
  static final url =
      QueryStringProperty<HotelPhotos>(_entities[4].properties[3]);
}

/// [HotelPoi] entity fields to define ObjectBox queries.
class HotelPoi_ {
  /// see [HotelPoi.id]
  static final id = QueryIntegerProperty<HotelPoi>(_entities[5].properties[0]);

  /// see [HotelPoi.cat]
  static final cat = QueryStringProperty<HotelPoi>(_entities[5].properties[1]);

  /// see [HotelPoi.ic]
  static final ic = QueryStringProperty<HotelPoi>(_entities[5].properties[2]);

  /// see [HotelPoi.name]
  static final name = QueryStringProperty<HotelPoi>(_entities[5].properties[3]);

  /// see [HotelPoi.distanceTxt]
  static final distanceTxt =
      QueryStringProperty<HotelPoi>(_entities[5].properties[4]);

  /// see [HotelPoi.lat]
  static final lat = QueryDoubleProperty<HotelPoi>(_entities[5].properties[5]);

  /// see [HotelPoi.lng]
  static final lng = QueryDoubleProperty<HotelPoi>(_entities[5].properties[6]);

  /// see [HotelPoi.photo]
  static final photo =
      QueryStringProperty<HotelPoi>(_entities[5].properties[7]);
}

/// [HotelResultStatus] entity fields to define ObjectBox queries.
class HotelResultStatus_ {
  /// see [HotelResultStatus.id]
  static final id =
      QueryIntegerProperty<HotelResultStatus>(_entities[6].properties[0]);

  /// see [HotelResultStatus.hotelName]
  static final hotelName =
      QueryStringProperty<HotelResultStatus>(_entities[6].properties[1]);

  /// see [HotelResultStatus.query]
  static final query =
      QueryStringProperty<HotelResultStatus>(_entities[6].properties[2]);

  /// see [HotelResultStatus.match]
  static final match =
      QueryDoubleProperty<HotelResultStatus>(_entities[6].properties[3]);

  /// see [HotelResultStatus.provider]
  static final provider =
      QueryStringProperty<HotelResultStatus>(_entities[6].properties[4]);

  /// see [HotelResultStatus.hotelUrl]
  static final hotelUrl =
      QueryStringProperty<HotelResultStatus>(_entities[6].properties[5]);
}

/// [HotelCache] entity fields to define ObjectBox queries.
class HotelCache_ {
  /// see [HotelCache.id]
  static final id =
      QueryIntegerProperty<HotelCache>(_entities[7].properties[0]);

  /// see [HotelCache.externalId]
  static final externalId =
      QueryStringProperty<HotelCache>(_entities[7].properties[1]);

  /// see [HotelCache.hashId]
  static final hashId =
      QueryStringProperty<HotelCache>(_entities[7].properties[2]);

  /// see [HotelCache.date]
  static final date =
      QueryIntegerProperty<HotelCache>(_entities[7].properties[3]);

  /// see [HotelCache.hotel]
  static final hotel =
      QueryRelationToOne<HotelCache, HotelItem>(_entities[7].properties[4]);

  /// see [HotelCache.status]
  static final status = QueryRelationToOne<HotelCache, HotelResultStatus>(
      _entities[7].properties[5]);
}
